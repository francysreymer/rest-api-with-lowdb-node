import { getReflectMetadata } from '@inversifyjs/reflect-metadata-utils';
import { TAGGED_PROP } from '../../reflectMetadata/data/keys';
import { getPropertyMetadataFromLegacyMetadata } from './getPropertyMetadataFromLegacyMetadata';
export function getClassMetadataProperties(type) {
    const propertiesLegacyMetadata = getReflectMetadata(type, TAGGED_PROP);
    const propertiesMetadata = new Map();
    if (propertiesLegacyMetadata !== undefined) {
        for (const property of Reflect.ownKeys(propertiesLegacyMetadata)) {
            const legacyMetadata = propertiesLegacyMetadata[property];
            propertiesMetadata.set(property, getPropertyMetadataFromLegacyMetadata(type, property, legacyMetadata));
        }
    }
    return propertiesMetadata;
}
//# sourceMappingURL=getClassMetadataProperties.js.map