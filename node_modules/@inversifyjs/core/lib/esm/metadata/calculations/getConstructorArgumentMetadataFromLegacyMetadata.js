import { InversifyCoreError } from '../../error/models/InversifyCoreError';
import { InversifyCoreErrorKind } from '../../error/models/InversifyCoreErrorKind';
import { getClassElementMetadataFromLegacyMetadata } from './getClassElementMetadataFromLegacyMetadata';
export function getConstructorArgumentMetadataFromLegacyMetadata(type, index, metadataList) {
    try {
        return getClassElementMetadataFromLegacyMetadata(metadataList);
    }
    catch (error) {
        if (InversifyCoreError.isErrorOfKind(error, InversifyCoreErrorKind.missingInjectionDecorator)) {
            throw new InversifyCoreError(InversifyCoreErrorKind.missingInjectionDecorator, `Expected a single @inject, @multiInject or @unmanaged decorator at type "${type.name}" at constructor arguments at index "${index.toString()}"`, { cause: error });
        }
        else {
            throw error;
        }
    }
}
//# sourceMappingURL=getConstructorArgumentMetadataFromLegacyMetadata.js.map