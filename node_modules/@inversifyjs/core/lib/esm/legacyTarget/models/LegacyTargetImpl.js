import { LazyServiceIdentifier } from '@inversifyjs/common';
import { getLegacyMetadata } from '../../metadata/calculations/getLegacyMetadata';
import { ClassElementMetadataKind } from '../../metadata/models/ClassElementMetadataKind';
import { NAMED_TAG } from '../../reflectMetadata/data/keys';
import { LegacyQueryableStringImpl } from '../../string/models/LegacyQueryableStringImpl';
import { getDescription } from '../../symbol/calculations/getDescription';
import { getTargetId } from '../calculations/getTargetId';
export class LegacyTargetImpl {
    #metadata;
    #id;
    #identifier;
    #lazyLegacyMetadata;
    #name;
    #type;
    constructor(identifier, metadata, type) {
        this.#id = getTargetId();
        this.#identifier = identifier;
        this.#lazyLegacyMetadata = undefined;
        this.#metadata = metadata;
        this.#name = new LegacyQueryableStringImpl(typeof identifier === 'string' ? identifier : getDescription(identifier));
        this.#type = type;
    }
    get id() {
        return this.#id;
    }
    /**
     * If this is a class property target, this is the name of the property to be injected
     */
    get identifier() {
        return this.#identifier;
    }
    get metadata() {
        if (this.#lazyLegacyMetadata === undefined) {
            this.#lazyLegacyMetadata = getLegacyMetadata(this.#metadata);
        }
        return this.#lazyLegacyMetadata;
    }
    get name() {
        return this.#name;
    }
    get type() {
        return this.#type;
    }
    get serviceIdentifier() {
        if (LazyServiceIdentifier.is(this.#metadata.value)) {
            return this.#metadata.value.unwrap();
        }
        else {
            return this.#metadata.value;
        }
    }
    getCustomTags() {
        return [...this.#metadata.tags.entries()].map(([key, value]) => ({
            key,
            value,
        }));
    }
    getNamedTag() {
        return this.#metadata.name === undefined
            ? null
            : {
                key: NAMED_TAG,
                value: this.#metadata.name,
            };
    }
    hasTag(key) {
        return this.metadata.some((metadata) => metadata.key === key);
    }
    isArray() {
        return this.#metadata.kind === ClassElementMetadataKind.multipleInjection;
    }
    isNamed() {
        return this.#metadata.name !== undefined;
    }
    isOptional() {
        return this.#metadata.optional;
    }
    isTagged() {
        return this.#metadata.tags.size > 0;
    }
    matchesArray(name) {
        return this.isArray() && this.#metadata.value === name;
    }
    matchesNamedTag(name) {
        return this.#metadata.name === name;
    }
    matchesTag(key) {
        return (value) => this.metadata.some((metadata) => metadata.key === key && metadata.value === value);
    }
}
//# sourceMappingURL=LegacyTargetImpl.js.map